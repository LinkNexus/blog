{% extends 'base.html.twig' %}

{% block title %}
   {{ parent() }} Home
{% endblock %}

{% block stylesheets %}
   {{ parent() }}
   {{ encore_entry_link_tags('main') }}
   <link rel="stylesheet" type="text/css" href="https://unpkg.com/trix@2.0.8/dist/trix.css">
{% endblock %}

{% block body %}

   <style>
      #main-header-icons div:nth-child(1) {
         border-bottom: 3px solid var(--principalColor);

         & .main-header-icon {
            color: var(--principalColor);
         }
      }
   </style>

   {% include 'base/header.html.twig' %}

    <aside class="left-aside-menu">

       <div class="left-aside-menu-elements">
          <div class="left-aside-menu-element">
             {% if user.profilePicture is null %}
                {% set imagePath = 'images/' ~ user.gender ~ '_icon.jpg' %}
                <img src="{{ asset(imagePath|lower) }}" alt="profile_pic" class="profile-picture">
             {% endif %}
             <span>{{ user.username }}</span>
          </div>
          <div class="left-aside-menu-element">
             <img src="{{ asset('images/icons/friends.png') }}" alt="">
             <span>Friends</span>
          </div>
          <div class="left-aside-menu-element">
             <img src="{{ asset('images/icons/newsfeed.png') }}" alt="">
             <span>Feeds</span>
          </div>
          <div class="left-aside-menu-element">
             <img src="{{ asset('images/icons/diversity.png') }}" alt="">
             <span>Groups</span>
          </div>
          <div class="left-aside-menu-element">
             <img src="{{ asset('images/icons/shop.png') }}" alt="">
             <span>Marketplace</span>
          </div>
          <div class="left-aside-menu-element">
             <img src="{{ asset('images/icons/smart-tv.png') }}" alt="">
             <span>Videos</span>
          </div>
          <div class="left-aside-menu-element">
             <img src="{{ asset('images/icons/clock.png') }}" alt="">
             <span>Memories</span>
          </div>
          <div class="left-aside-menu-element">
             <img src="{{ asset('images/icons/bookmark.png') }}" alt="">
             <span>Saved</span>
          </div>
          <div class="left-aside-menu-element">
             <div>
                <span class="fa fa-chevron-down"></span>
             </div>
             <span>See more</span>
          </div>
          <div class="left-aside-menu-element">
             <img src="{{ asset('images/icons/timetable.png') }}" alt="">
             <span>Events</span>
          </div>
          <div class="left-aside-menu-element">
             <img src="{{ asset('images/icons/messenger.png') }}" alt="">
             <span>Messages</span>
          </div>
          <div class="left-aside-menu-element">
             <img src="{{ asset('images/icons/atm-card.png') }}" alt="">
             <span>Orders and Payment</span>
          </div>
          <div class="left-aside-menu-element">
             <img src="{{ asset('images/icons/facebook-page.png') }}" alt="">
             <span>Pages</span>
          </div>
          <div class="left-aside-menu-element">
             <img src="{{ asset('images/icons/game.png') }}" alt="">
             <span>Play Games</span>
          </div>
          <div class="left-aside-menu-element">
             <div>
                <span class="fa fa-chevron-up"></span>
             </div>
             <span>See less</span>
          </div>
       </div>
       <div class="left-aside-menu-shortcuts">
          <div class="left-aside-menu-shortcuts-header">
             <h3>Your Shortcuts</h3>
             <a>Edit</a>
          </div>
       </div>
    </aside>

   <aside class="right-aside-menu">
      <div class="right-aside-menu-block pages-and-profiles">
         <h3>Your Pages and Profiles</h3>
         <div class="create-new-page">
            <div>
               <span class="fa fa-plus"></span>
            </div>
            <span>Create new Page</span>
         </div>
      </div>
      <div class="right-aside-menu-block group-conversations">
         <h3>Group Conversations</h3>
         <div class="create-new-group">
            <div>
               <span class="fa fa-plus"></span>
            </div>
            <span>Create new Group</span>
         </div>
      </div>
   </aside>

   <section class="main-section">
      <div class="stories-block">
         <div class="stories">
            <div>
               <span class="fa fa-plus"></span>
            </div>
            <div>
               <span>Create Story</span>
               <p>Share a Photo or write something</p>
            </div>
         </div>
      </div>

      <div class="main-section-content">
         <div class="upload-post">
            <div>
               {% if user.profilePicture is null %}
                  {% set imagePath = 'images/' ~ user.gender ~ '_icon.jpg' %}
                  <img src="{{ asset(imagePath|lower) }}" alt="profile_pic">
               {% endif %}

               <input type="text" placeholder="What's on your mind, {{ user.username }}?">
            </div>
            <div>
               <div class="upload-post-action live">
                  <img src="{{ asset('images/icons/live.png') }}" alt="">
                  <span>Live Video</span>
               </div>
               <div class="upload-post-action photos">
                  <img src="{{ asset('images/icons/photos.png') }}" alt="">
                  <span>Photos and Videos</span>
               </div>
               <div class="upload-post-action code">
                  <img src="{{ asset('images/icons/code.png') }}" alt="">
                  <span>Code</span>
               </div>
            </div>
         </div>

         {% include 'base/upload-post.html.twig' %}

         {% for post in user.posts %}
            <div class="fr-view">
               {{ post.content|raw }}
            </div>
         {% endfor %}
      </div>
   </section>

   <script>
      const leftAsideMenuElements = document.querySelectorAll('.left-aside-menu-element'),
              leftAsideMenuElementsIconContainers = document.querySelectorAll('.left-aside-menu-element>div'),
          leftAsideMenuShortcuts = document.querySelector('.left-aside-menu-shortcuts'),
              rightAsideMenuCreateGroup = document.querySelector('.right-aside-menu-block .create-new-group'),
              rightAsideMenuCreatePage = document.querySelector('.right-aside-menu-block .create-new-page'),
              rightAsideMenuCreateGroupIconContainer = document.querySelector('.create-new-group>div'),
              rightAsideMenuCreatePageIconContainer = document.querySelector('.create-new-page>div');

      let nonDisplayedLeftAsideMenuElements = [];

      changeContainerColorOnHover(leftAsideMenuElements[8], leftAsideMenuElementsIconContainers[0]);
      changeContainerColorOnHover(leftAsideMenuElements[14], leftAsideMenuElementsIconContainers[1]);
      changeContainerColorOnHover(rightAsideMenuCreatePage, rightAsideMenuCreatePageIconContainer);
      changeContainerColorOnHover(rightAsideMenuCreateGroup, rightAsideMenuCreateGroupIconContainer);

      for (const leftAsideMenuElement of leftAsideMenuElements) {
         if (getComputedStyle(leftAsideMenuElement).display === 'none') {
            nonDisplayedLeftAsideMenuElements.push(leftAsideMenuElement);
         }
      }

      leftAsideMenuElements[8].addEventListener('click', function () {
         this.style.display = 'none';

         for (const nonDisplayedLeftAsideMenuElement of nonDisplayedLeftAsideMenuElements) {
            nonDisplayedLeftAsideMenuElement.style.display = 'flex';
         }
      })

      leftAsideMenuElements[14].addEventListener('click', function () {
         leftAsideMenuElements[8].style.display = 'flex';

         for (const nonDisplayedLeftAsideMenuElement of nonDisplayedLeftAsideMenuElements) {
            nonDisplayedLeftAsideMenuElement.style.display = 'none';
         }
      })

      leftAsideMenuShortcuts.style.visibility = 'visible';

      let fileInputsCounter = 0;

      const postEditor = FroalaEditor("#create_post_form_content", {
         events: {
            'image.inserted': function ($img, response) {
               fileInputsCounter++;
               let fileId = 'file-input-' + fileInputsCounter;
               $img[0].setAttribute('data-file-id', fileId);

               fetch($img[0].src)
                       .then(res => res.blob())
                       .then(blob => {
                          const inputField = document.createElement('input');
                          inputField.setAttribute('type', 'file');
                          inputField.setAttribute('name', $img[0].src);
                          inputField.setAttribute('id', fileId);
                          inputField.setAttribute('value', $img[0].src);

                          let dataTransfer = new DataTransfer();
                          dataTransfer.items.add(new File([blob], $img[0].src, {
                             type: blob.type
                          }));

                          inputField.files = dataTransfer.files;
                          document.getElementById('file-inputs').appendChild(inputField);
                       });
            },
            'image.removed': function ($img) {
               let fileId = $img[0].getAttribute('data-file-id');
               const inputField = document.getElementById(fileId);

               if (inputField) {
                  inputField.remove();
               }
            },
            'file.inserted': function ($file, response) {
               fileInputsCounter++;
               let fileId = 'file-input-' + fileInputsCounter;
               $file[0].setAttribute('data-file-id', fileId);

               fetch($file[0].src)
                       .then(res => res.blob())
                       .then(blob => {
                          const inputField = document.createElement('input');
                          inputField.setAttribute('type', 'file');
                          inputField.setAttribute('name', $file[0].src);
                          inputField.setAttribute('id', fileId);
                          inputField.setAttribute('value', $file[0].src);

                          let dataTransfer = new DataTransfer();
                          dataTransfer.items.add(new File([blob], $file[0].src, {
                             type: blob.type
                          }));

                          inputField.files = dataTransfer.files;
                          document.getElementById('file-inputs').appendChild(inputField);
                       });
            },
            'file.removed': function ($file) {
               let fileId = $file[0].getAttribute('data-file-id');
               const inputField = document.getElementById(fileId);

               if (inputField) {
                  inputField.remove();
               }
            },
            'video.inserted': function ($img, response) {
               fileInputsCounter++;
               let fileId = 'file-input-' + fileInputsCounter;
               $img[0].setAttribute('data-file-id', fileId);

               fetch($img[0].src)
                       .then(res => res.blob())
                       .then(blob => {
                          const inputField = document.createElement('input');
                          inputField.setAttribute('type', 'file');
                          inputField.setAttribute('name', $img[0].src);
                          inputField.setAttribute('id', fileId);
                          inputField.setAttribute('value', $img[0].src);

                          let dataTransfer = new DataTransfer();
                          dataTransfer.items.add(new File([blob], $img[0].src, {
                             type: blob.type
                          }));

                          inputField.files = dataTransfer.files;
                          document.getElementById('file-inputs').appendChild(inputField);
                       });
            },
            'video.removed': function ($img) {
               let fileId = $img[0].getAttribute('data-file-id');
               const inputField = document.getElementById(fileId);

               if (inputField) {
                  inputField.remove();
               }
            },
         },
         imageUploadMethod: 'POST',
         imageMaxSize: 5 * 1024 * 1024,
         imageAllowedTypes: ['jpeg', 'jpg', 'png', 'webp', 'gif'],
         videoUploadMethod: 'POST',
         videoMaxSize: 50 * 1024 * 1024,
         videoAllowedTypes: ['mp4', 'avi', 'mov'],
         fileUploadMethod: 'POST',
         fileMaxSize: 10 * 1024 * 1024,
         fileAllowedTypes: ['pdf', 'mp3'],
      });

      const createPostBlock = document.querySelector('.create-post'),
              uploadPostInput = document.querySelector('.upload-post input');

      uploadPostInput.addEventListener('click', function () {
         createPostBlock.style.display = 'flex';
      })

      if (document.getElementById('create_post_form_file').files.length !== 0) {
         console.log(document.getElementById('create_post_form_file').files)
      }
   </script>

{% endblock %}
